apply plugin: 'java'

if(!project.hasProperty('mavenURL') || !project.hasProperty('downloadURL') || !project.hasProperty('version')) {
  throw new GradleException("Usage: ./gradlew build -PmavenURL= -PdownloadURL= -version=");
}

def downloadDir = "${project.buildDir}/dist.apache.org/repos/dist/dev/incubator/geode/$version"
def srcDist = "${project.buildDir}/srcDist"
def binDist = "${project.buildDir}/binDist"
def versionNORC = version.replaceAll(/.RC\d+/, "");

repositories {
    jcenter()
    maven { url "$mavenURL" }
}

dependencies {
    compile "org.apache.geode:geode-core:$versionNORC"
    testCompile 'junit:junit:4.12'
}


//TODO - turn this into at least an ant get or something javaified
task download(type:Exec) {
  commandLine 'wget', "$downloadURL", "-m", "-np", "-nv"
  workingDir=project.buildDir
}

//TODO - turn this into at least an ant get or something javaified
task verifyMD5(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'md5sum -c *.md5'
  workingDir=downloadDir
}

//TODO - turn this into at least an ant get or something javaified
task verifySHA(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'sha256sum -c *.sha256'
  workingDir=downloadDir
}

//TODO - turn this into at least an ant get or something javaified
task verifyGPG(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'ls *.asc | xargs -n1 gpg --verify'
  workingDir=downloadDir
}

task verifySigs(dependsOn: [verifyMD5, verifySHA, verifyGPG])

task unzipSrc(type: Copy, dependsOn: download) {
  println "${downloadDir}/apache-geode-src-${versionNORC}.zip";
  def zipFile = file("${downloadDir}/apache-geode-src-${versionNORC}.zip")
  def outputDir = file(srcDist)

  from zipTree(zipFile)
  into outputDir
}

task unzipBin(type: Copy, dependsOn: download) {
  println "${downloadDir}/apache-geode-${versionNORC}.zip";
  def zipFile = file("${downloadDir}/apache-geode-${versionNORC}.zip")
  def outputDir = file(binDist)

  from zipTree(zipFile)
  into outputDir
}

task testgfsh(type: Exec, dependsOn: unzipBin) {
  workingDir="${binDist}/apache-geode-$versionNORC"
  commandLine "$projectDir/scripts/gfsh_test.sh"
}



//This is deliberately *not* using gradle build to make sure the wrapper works
task buildSrc(type: Exec, dependsOn: unzipSrc) {
  workingDir="${srcDist}/apache-geode-src-$versionNORC"
  commandLine './gradlew', 'build'
}

check.dependsOn verifySigs, buildSrc, testgfsh
